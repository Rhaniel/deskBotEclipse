{
  "_args": [
    [
      {
        "raw": "botkit-middleware-watson@^1.3.1",
        "scope": null,
        "escapedName": "botkit-middleware-watson",
        "name": "botkit-middleware-watson",
        "rawSpec": "^1.3.1",
        "spec": ">=1.3.1 <2.0.0",
        "type": "range"
      },
      "C:\\Dev\\GIT\\deskBot"
    ]
  ],
  "_from": "botkit-middleware-watson@>=1.3.1 <2.0.0",
  "_id": "botkit-middleware-watson@1.3.1",
  "_inCache": true,
  "_location": "/botkit-middleware-watson",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/botkit-middleware-watson-1.3.1.tgz_1485047587934_0.6173140243627131"
  },
  "_npmUser": {
    "name": "germanattanasio",
    "email": "germanattanasio@gmail.com"
  },
  "_npmVersion": "4.1.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "botkit-middleware-watson@^1.3.1",
    "scope": null,
    "escapedName": "botkit-middleware-watson",
    "name": "botkit-middleware-watson",
    "rawSpec": "^1.3.1",
    "spec": ">=1.3.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/botkit-middleware-watson/-/botkit-middleware-watson-1.3.1.tgz",
  "_shasum": "ada5f87b1cd296a87e628b107e18d88c7a55db55",
  "_shrinkwrap": null,
  "_spec": "botkit-middleware-watson@^1.3.1",
  "_where": "C:\\Dev\\GIT\\deskBot",
  "bugs": {
    "url": "https://github.com/watson-developer-cloud/botkit-middleware/issues"
  },
  "dependencies": {
    "bluebird": "^3.4.6",
    "debug": "^2.2.0",
    "watson-developer-cloud": "^2.4.1"
  },
  "description": "A middleware for using Watson Conversation in a Botkit-powered bot.",
  "devDependencies": {
    "assert": "^1.4.1",
    "botkit": "^0.2.2",
    "mocha": "^3.1.0",
    "nock": "^8.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ada5f87b1cd296a87e628b107e18d88c7a55db55",
    "tarball": "https://registry.npmjs.org/botkit-middleware-watson/-/botkit-middleware-watson-1.3.1.tgz"
  },
  "gitHead": "3620ce19c49bd9f8891ceb4eaadb1fcc05a55c40",
  "homepage": "https://github.com/watson-developer-cloud/botkit-middleware#readme",
  "keywords": [
    "bot",
    "botkit",
    "chatbot",
    "conversation",
    "ibm",
    "watson"
  ],
  "license": "Apache-2.0",
  "main": "lib/middleware/index.js",
  "maintainers": [
    {
      "name": "aarora91",
      "email": "ashima.arora91@gmail.com"
    },
    {
      "name": "dgterry",
      "email": "dgterry@us.ibm.com"
    },
    {
      "name": "germanattanasio",
      "email": "germanattanasio@gmail.com"
    },
    {
      "name": "nfriedly",
      "email": "nathan@nfriedly.com"
    }
  ],
  "name": "botkit-middleware-watson",
  "optionalDependencies": {},
  "readme": "# Use IBM Watson's Conversation service to chat with your Botkit-powered Bot! [![Build Status](https://travis-ci.org/watson-developer-cloud/botkit-middleware.svg?branch=master)](https://travis-ci.org/watson-developer-cloud/botkit-middleware)\n\nThis middleware plugin for [Botkit](http://howdy.ai/botkit) allows developers to easily integrate a [Watson Conversation](https://www.ibm.com/watson/developercloud/conversation.html) workspace with multiple social channels like Slack, Facebook, and Twilio. Customers can have simultaneous, independent conversations with a single workspace through different channels.\n\n## Middleware Overview\n* Automatically manages context in multi-turn conversations to keep track of where the user left off in the conversation.\n* Allows greater flexibility in message handling.\n* Handles external databases for context storage.\n* Easily integrates with third-party services.\n* Exposes the following functions to developers:\n  * `before`: pre-process requests before sending to Watson Conversation (Conversation).\n  * `after` : post-process responses before forwarding them to Botkit.\n\n## Installation\n```sh\n$ npm install botkit-middleware-watson --save\n```\n\n## Usage\n### Acquire Watson Conversation credentials\nThe middleware needs you to provide the `username`, `password`, and `workspace_id` of your Watson Conversation chat bot. If you have an existing Conversation service instance, follow [these steps](https://github.com/watson-developer-cloud/conversation-simple/blob/master/README.md#configuring-the-application-environmnet) to get your credentials.\n\nIf you do not have a Conversation service instance,  follow [these steps](https://github.com/watson-developer-cloud/conversation-simple/blob/master/README.md#before-you-begin) to get started.\n\n### Acquire channel credentials\nThis document shows code snippets for using a Slack bot with the middleware. (If you want examples for the other channels, see the [examples/multi-bot](/examples/multi-bot) folder. The multi-bot example app shows how to connect to Slack, Facebook, and Twilio IPM bots running on a single Express server.)\n\nYou need a _Slack token_ for your Slack bot to talk to Conversation.\n\nIf you have an existing Slack bot, then copy the Slack token from your Slack settings page.\n\nOtherwise, follow [Botkit's instructions](https://github.com/howdyai/botkit/blob/master/readme-slack.md) to create your Slack bot from scratch. When your bot is ready, you are provided with a Slack token.\n\n### Bot setup\n\nThis section walks you through code snippets to set up your Slack bot. If you want, you can jump straight to the [full example](/examples/simple-bot).\n\nIn your app, add the following lines to create your Slack controller using Botkit:\n```js\nvar slackController = Botkit.slackbot();\n```\n\nSpawn a Slack bot using the controller:\n```js\nvar slackBot = slackController.spawn({\n    token: YOUR_SLACK_TOKEN\n});\n```\n\nCreate the middleware object which you'll use to connect to the Conversation service:\n```js\nvar watsonMiddleware = require('botkit-middleware-watson')({\n  username: YOUR_CONVERSATION_USERNAME,\n  password: YOUR_CONVERSATION_PASSWORD,\n  workspace_id: YOUR_WORKSPACE_ID,\n  version_date: '2016-09-20',\n  minimum_confidence: 0.50, // (Optional) Default is 0.75\n});\n```\n\nTell your Slackbot to use the _watsonMiddleware_ for incoming messages:\n```js\nslackController.middleware.receive.use(watsonMiddleware.receive);\nslackBot.startRTM();\n```\n\nFinally, make your bot _listen_ to incoming messages and respond with Watson Conversation:\n```js\nslackController.hears(['.*'], ['direct_message', 'direct_mention', 'mention'], function(bot, message) {\n    bot.reply(message, message.watsonData.output.text.join('\\n'));\n});\n```\nThe middleware attaches the `watsonData` object to _message_. This contains the text response from Conversation.\n\nThen you're all set!\n\n### Middleware Functions\nThe _watsonMiddleware_ object provides some useful functions which can be used for customizing the question-answering pipeline.\n\nThey come in handy to:\n- Respond to incoming messages\n- Make database updates\n- Update the context in the payload\n- Call some external service before/after calling Conversation\n- Filter out irrelevant intents by overwriting Botkit's hears function\n\n#### `receive`\nThe _receive_ function is the one which gets triggered on incoming bot messages. One needs to bind it to the Botkit's receive middleware in order for it to work.\n\n```js\n// Connect to Watson middleware\nslackController.middleware.receive.use(middleware.receive);\n```\n\nThen simply respond to messages as follows:\n```js\nslackController.hears(['.*'], ['direct_message', 'direct_mention', 'mention'], function(bot, message) {\n  bot.reply(message, message.watsonData.output.text.join('\\n'));\n});\n```\n\nNote: The receive function is triggered on _every_ message. Please consult the [Botkit's guide](https://github.com/howdyai/botkit#receive-middleware) to the receive middleware to know more about it.\n\n#### `interpret`\n\nThe `interpret()` function works very similarly to the receive function but unlike the receive function,\n- it is not mapped to a Botkit function so doesn't need to be added as a middleware to Botkit\n- doesn't get triggered on all events\n\nThe _interpret_ function only gets triggered when an event is _heard_ by the controller. For example, one might want your bot to only respond to _direct messages_ using Conversation. In such scenarios, one would use the interpret function as follows:\n\n```js\nslackController.hears(['.*'], ['direct_message'], function(bot, message) {\n  middleware.interpret(bot, message, function(err) {\n    if (!err)\n      bot.reply(message, message.watsonData.output.text.join('\\n'));\n  });\n});\n```\n\n#### `hear`\n\nThe Watson middleware also includes a `hear()` function which provides a mechanism to\ndevelopers to fire handler functions based on the most likely intent of the user.\nThis allows a developer to create handler functions for specific intents in addition\nto using the data provided by Watson to power the conversation.\n\nThe `hear()` function can be used on individual handler functions, or can be used globally.\n\nUsed on an individual handler:\n\n```js\nslackController.hears(['hello'], ['direct_message', 'direct_mention', 'mention'], watsonMiddleware.hear, function(bot, message) {\n\n    bot.reply(message, message.watsonData.output.text.join('\\n'));\n\n    // now do something special related to the hello intent\n\n});\n```\n\nUsed globally:\n\n```js\nslackController.changeEars(watsonMiddleware.hear);\n\nslackController.hears(['hello'], ['direct_message', 'direct_mention', 'mention'], function(bot, message) {\n\n    bot.reply(message, message.watsonData.output.text.join('\\n'));\n\n    // now do something special related to the hello intent\n});\n```\n\n#### `before` and `after`\nThe _before_ and _after_ callbacks can be used to perform some tasks _before_ and _after_ Conversation is called. One may use it to modify the request/response payloads, execute business logic like accessing a database or making calls to external services.\n\nThey can be customized as follows:\n\n```js\nmiddleware.before = function(message, conversationPayload, callback) {\n    // Code here gets executed before making the call to Conversation.\n    callback(null, customizedPayload);\n  }\n```\n\n```js\n  middleware.after = function(message, conversationResponse, callback) {\n    // Code here gets executed after the call to Conversation.\n    callback(null, conversationResponse);\n  }\n```\n\n## License\n\nThis library is licensed under Apache 2.0. Full license text is available in [LICENSE](LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/watson-developer-cloud/botkit-middleware.git"
  },
  "scripts": {
    "start": "node lib/middleware/index.js",
    "test": "mocha test"
  },
  "version": "1.3.1"
}
